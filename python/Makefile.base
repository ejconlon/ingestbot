# To use the targets defined here, define PACKAGE_NAME and include this file.
# All common build tasks can be invoked by targets here.
# For example, to setup the virtual environment, use `make venv`.
# Then `make test` to lint, typecheck, and unit test.

.PHONY: default
default:
	echo "No default target"

# Install system-level dependencies necessary to build the project
.PHONY: deps
deps:
	pip3 install pip-tools

# Remove frozen dependencies for a fresh pipcompile
.PHONY: pipclean
pipclean:
	rm -f requirements.txt dev-requirements.txt

# Freeze dependencies specified in requirements files
.PHONY: pipcompile
pipcompile:
	python3 -m piptools compile requirements.in
	python3 -m piptools compile dev-requirements.in

# Remove the virtual environment
.PHONY: venvclean
venvclean:
	rm -rf .venv

# Create the virtual environment
.PHONY: venv
venv:
	python3 -m venv --upgrade-deps .venv
	.venv/bin/python3 -m pip --cache-dir ../../.pipcache install wheel
	.venv/bin/python3 -m pip --cache-dir ../../.pipcache install -r dev-requirements.txt

# Typecheck with mypy
.PHONY: typecheck
typecheck:
	.venv/bin/python3 -m mypy -p $(PACKAGE_NAME)

# Lint with flake8
.PHONY: lint
lint:
	.venv/bin/python3 -m flake8 --config=../../python/setup.cfg $(PACKAGE_NAME)

# Unit test with pytest - TODO add some tests!
.PHONY: unit
unit:
	.venv/bin/python3 -m pytest tests

# Run all tests
.PHONY: test
test: lint typecheck unit

# Run the server locally with the default args.
# Copy the command and run it in bash to pass custom args.
.PHONY: run
run:
	.venv/bin/python3 -m $(PACKAGE_NAME).main

# Package the application
.PHONY: package
package:
	mkdir -p ../../.build
	cd ../../.build && rm -f $(PACKAGE_NAME).zip
	cd ../../.build && rm -rf $(PACKAGE_NAME)
	cd ../../.build && python3 -m pip --cache-dir ../.pipcache install -t $(PACKAGE_NAME) -r ../components/$(PACKAGE_NAME)/requirements.txt
	cd ../../.build && cp -r ../components/$(PACKAGE_NAME)/$(PACKAGE_NAME) $(PACKAGE_NAME)
	cd ../../.build && sed -e"s/__PACKAGE_NAME__/$(PACKAGE_NAME)/g" ../python/entrypoint.sh.tpl > $(PACKAGE_NAME)/entrypoint.sh
	cd ../../.build && chmod +x $(PACKAGE_NAME)/entrypoint.sh
	cd ../../.build && zip -rq $(PACKAGE_NAME).zip $(PACKAGE_NAME)
	cd ../../.build && unzip -l $(PACKAGE_NAME).zip

# Run the packaged application
.PHONY: runpackage
runpackage:
	.build/$(PACKAGE_NAME)/entrypoint.sh

# Clean most generated files (+ venv)
.PHONY: clean
clean: venvclean
	rm -rf .mypy_cache .pytest_cache
